generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_URL")
}

model User {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  email    String  @unique
  name     String?
  picture  String?
  password String?

  role Role @default(USER)

  isVerified         Boolean    @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean    @default(false) @map("is_two_factor_enabled")
  method             AuthMethod

  accounts  Account[]
  reviews   Review[]
  orders    Order[]
  favorites Favorite[]

  @@map("users")
}

model Account {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  provider          String
  providerAccountId String @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Favorite {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String  @map("user_id")
  productId String  @map("product_id")

  @@unique([userId, productId])
  @@map("favorites")
}

model Order {
  id        String    @id() @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt() @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  price           Int
  currency        String
  paymentIntentId String @map("payment_intent_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  pickUp  PickUp  @relation(fields: [pickUpId], references: [id])
  dropOff DropOff @relation(fields: [dropOffId], references: [id])

  userId    String @map("user_id")
  productId String @map("product_id")
  pickUpId  String @unique @map("pick_up_id")
  dropOffId String @unique @map("drop_off_id")

  @@unique([userId, productId])
  @@map("orders")
}

model PickUp {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  pickUp DateTime @map("pick_up")
  order  Order[]

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String   @map("location_id")

  @@unique([pickUp, locationId])
  @@map("pick_up")
}

model DropOff {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  dropOff DateTime @map("drop_off")
  order   Order[]

  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId String   @map("location_id")

  @@unique([dropOff, locationId])
  @@map("drop_off")
}

model Product {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt() @map("updated_at")

  name         String
  description  String
  mainIcon     String
  galleryIcons String[]     @map("gallery_icons")
  type         CarType
  transmission Transmission
  steering     CarSteering
  capacity     Capacity
  gasoline     Int
  price        Float

  discount  Discount[]
  location  Location[]
  reviews   Review[]
  orders    Order[]
  favorites Favorite[]

  @@map("products")
}

model Discount {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  discount Int

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique @map("product_id")

  @@unique([productId, id])
  @@map("discounts")
}

model Location {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  city     String
  address  String
  quantity Int       @default(1)
  pickUp   PickUp[]
  dropOff  DropOff[]

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")

  @@unique([city, productId, address])
  @@map("locations")
}

model Review {
  id        String   @id() @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating  Int
  comment String

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String  @map("product_id")
  userId    String  @map("user_id")

  @@unique([userId, productId])
  @@map("reviews")
}

enum Role {
  ADMIN
  USER
}

enum AuthMethod {
  CREDENTIALS
  GOOGLE
}

enum CarType {
  SPORT
  SUV
  MPV
  SEDAN
  COUPE
  HATCHBACK
}

enum Transmission {
  MANUAL
  AUTO
}

enum CarSteering {
  LEFT
  RIGHT
}

enum Capacity {
  TWO
  FOUR
  SIX
  EIGHT
}
